Com certeza! Baseando-me nas informações fornecidas e em nossa conversa anterior, reformulo o prompt para a IA, detalhando os aspectos de certificado digital, autenticação e modularidade.

---

**Prompt para IA: Desenvolvimento de Interface de Aplicativo para Integração Integra Contador (Versão 2.0)**

**Objetivo:** Criar a interface de usuário (UI) e a estrutura base de um aplicativo para integração com as APIs do Integra Contador, com foco rigoroso nos processos de gerenciamento e conversão de certificados digitais, autenticação na API, e modularidade para consumo de serviços.

**Público-alvo:** Escritórios de contabilidade, empresas do ramo contábil e software-houses que utilizarão a plataforma Integra Contador.

**Requisitos Gerais da Interface:**
1.  **Design Limpo e Intuitivo:** A UI deve ser fácil de navegar para usuários com diferentes níveis de familiaridade tecnológica.
2.  **Responsividade:** A interface deve se adaptar a diferentes tamanhos de tela (desktop, tablet, mobile).
3.  **Segurança e Confiança:** Transmitir uma sensação de segurança, especialmente nas áreas que envolvem o upload e o manuseio de certificados digitais.
4.  **Modularidade UI/Codebase:** A interface deve ser projetada de forma a permitir que diferentes módulos (Autenticação, Gerenciamento de Certificados, Consumo de Serviço X) funcionem de forma independente, mas interconectada. A IA deve sugerir como essa modularidade se reflete na UI e como a estrutura de código subjacente para cada módulo seria (por exemplo, funções ou classes separadas para cada etapa/componente).
5.  **Reutilização de Componentes:** Elementos da UI e a lógica de interação (por exemplo, para o processo de upload de arquivo ou exibição de mensagens de status) devem ser reutilizáveis entre as diferentes seções.

---

**Passo a Passo Detalhado para a IA:**

**1. Tela de Início / Boas-Vindas:**
    *   Crie uma tela de boas-vindas com uma breve descrição do que o aplicativo faz em relação ao Integra Contador.
    *   Inclua um botão claro ou seção para "Configurar Acesso e Serviços".

**2. Seção de Gerenciamento de Credenciais e Certificados Digitais e-CNPJ (Módulo "Credenciais"):**
    *   **Contexto:** O acesso inicial e a contratação do produto Integra Contador exigem um **certificado digital e-CNPJ**. As APIs do Integra Contador utilizam o protocolo OAuth2 para autenticação.
    *   **Subseção 2.1: Obtenção de Consumer Key e Consumer Secret:**
        *   Crie campos de entrada para `Consumer Key` e `Consumer Secret`.
        *   Adicione um texto explicativo claro: "Para consumir as APIs, você deverá utilizar os códigos Consumer Key e Consumer Secret disponibilizados na Área do Cliente Serpro em `https://cliente.serpro.gov.br`. Mantenha essas informações protegidas, pois elas identificam seu usuário e seu contrato com o SERPRO".
        *   Inclua um botão "Salvar Credenciais" que persistirá esses dados no aplicativo.
    *   **Subseção 2.2: Upload e Conversão de Certificado Digital e-CNPJ:**
        *   Crie uma área específica para o **upload do certificado digital e-CNPJ**.
        *   Forneça um campo de upload de arquivo (com suporte a arrastar e soltar) e um botão "Procurar Arquivo".
        *   **Formatos Aceitos:** Informe claramente que "Toda requisição de autenticação na loja do Serpro deverá ser informado o arquivo do certificado digital do tipo **.p12 ou .pfx** acompanhado da senha do certificado".
        *   Inclua um campo para a **senha do certificado digital**.
        *   **Processo de Conversão (Visualização da Lógica Backend):**
            *   A interface deve indicar que, para a utilização com certas linguagens/bibliotecas (como o exemplo em Python que utiliza arquivos `.pem` e `.key`), pode ser necessária a **conversão do certificado `.pfx` ou `.p12` para `.pem` (certificado) e `.key` (chave privada)**.
            *   A IA deve apresentar visualmente (ex: diagrama simplificado, texto explicativo passo a passo na UI, ou uma seção de "Detalhes Técnicos") como essa conversão ocorreria em segundo plano:
                *   O algoritmo de conversão pode usar `OpenSSL` ou a biblioteca `cryptography`.
                *   Ambos os métodos envolvem a extração do certificado PEM e da chave privada KEY a partir do arquivo `.pfx` ou `.p12`, utilizando a senha do certificado.
                *   A UI deve exibir o status da conversão (progresso, sucesso, falha e mensagens de erro).
            *   O aplicativo deve gerenciar internamente (fora da UI explícita de conversão, mas a UI deve refletir que isso acontece) esses arquivos `.pem` e `.key` ou o `.p12`/`.pfx` para uso nas requisições, dependendo da biblioteca/linguagem usada.
        *   Botão "Carregar/Processar Certificado".

**3. Processo de Autenticação na API (Módulo "Autenticação"):**
    *   **Contexto:** Para consumir as APIs, é necessário obter um token de acesso temporário (`Bearer Token`) e um `JWT token`. O `Bearer Token` possui um tempo de validade e, quando expirado, a requisição de um novo token deve ser repetida.
    *   **Subseção 3.1: Requisição de Tokens de Acesso:**
        *   Crie uma seção ou botão claro "Obter Tokens de Acesso".
        *   **Endpoint:** A interface deve indicar que a requisição POST é feita para `https://autenticacao.sapi.serpro.gov.br/authenticate`.
        *   **HTTP Headers (Visualização da Lógica Backend):**
            *   A UI deve ilustrar ou explicar que a requisição incluirá os seguintes cabeçalhos:
                *   `Authorization: Basic (base64(consumerKey:consumerSecret))`: Onde `consumerKey:consumerSecret` são concatenados e convertidos para BASE64.
                *   `Role-Type: TERCEIROS`: Este cabeçalho é obrigatório.
                *   `Content-Type: application/x-www-form-urlencoded`: Essencial para evitar erros "415 Unsupported Media Type".
            *   **Body (Visualização da Lógica Backend):**
                *   A UI deve indicar que o corpo da requisição será `grant_type=client_credentials`.
            *   **Certificado Digital na Requisição:**
                *   A interface deve sinalizar que o **certificado digital e-CNPJ (padrão ICP-Brasil)**, o mesmo utilizado na contratação do produto, deve ser enviado junto com as credenciais da API Serpro.
                *   Para a requisição, o arquivo do certificado digital do tipo `.p12` ou `.pfx` (acompanhado da senha) é informado. Se houver conversão para `.pem` e `.key`, estes seriam os arquivos usados pela biblioteca HTTP.
        *   **Feedback da Autenticação:**
            *   Exiba o status da requisição (ex: "Obtendo Tokens...", "Conectado ao Integra Contador").
            *   Em caso de sucesso, a interface deve indicar que o `access_token` e o `jwt_token` foram recebidos, junto com o tempo de expiração (`expires_in`).
            *   Em caso de falha (ex: HTTP CODE 401), a UI deve informar que o token expirou ou a autenticação falhou, e que o processo de obtenção de tokens deve ser repetido.

    *   **Subseção 3.2: Autenticação Via Procurador (Para Software-Houses/Terceiros):**
        *   **Contexto:** Para solicitantes que contrataram o produto mas não possuem procuração do contribuinte e desejam executar um serviço em nome do procurador (ex: escritórios de contabilidade), deve-se enviar um **documento XML assinado digitalmente pelo certificado digital do procurador** por meio do serviço auxiliar **AUTENTICAPROCURADOR**.
        *   Crie uma seção ou tela dedicada a este cenário, separada da autenticação principal do aplicativo.
        *   **Título:** "Acesso para Terceiros via Procuração".
        *   **Instruções Claras:** Explique a finalidade desta opção.
        *   **Campo de Upload para XML Assinado:** Permita o upload de um arquivo XML que já foi assinado digitalmente pelo certificado do procurador.
        *   **Feedback:** Indique o status da autenticação (sucesso, falha, "requisição não permitida" se a procuração não existir).

**4. Navegação e Seleção de Serviços API (Módulo "Serviços"):**
    *   Crie um menu de navegação (lateral ou superior) que categorize os serviços principais do Integra Contador. A IA deve consultar a "Api Reference" para agrupar e listar os serviços de forma lógica. Exemplos de categorias e serviços incluem:
        *   **Declarações:** `Consultar declarações`, `Gerar DAS`, `Transmitir Declaração (DCTFWEB)`.
        *   **Parcelamentos:** `Consultar Pedidos de Parcelamento`, `Emitir Documento de Arrecadação` (aplicável a `PARCMEI`, `PARCSN`, etc.).
        *   **MEI:** `Emitir CCMEI`, `Consultar dados CCMEI`, `PGMEI` (ex: Gerar DAS para PGMEI).
        *   **Procurações:** `Obter procuração`.
        *   **Situação Fiscal:** `SITFIS` (solicitar/emitir relatório de situação fiscal).
        *   **Mensagens:** `CAIXAPOSTAL` (obter lista/detalhes de mensagens).
        *   **Arrecadação:** `SICALC` (emitir DARF).
    *   Cada item do menu deve levar a uma interface específica para o consumo daquele serviço.

**5. Interface para Consumo de Serviços (Módulo "Serviço Específico"):**
    *   **Contexto:** Cada serviço da API possui parâmetros de "Entrada" e "Saída". A requisição final para o gateway da API Serpro utiliza os tokens de acesso.
    *   **Endpoint Base:** A interface deve indicar que o endpoint base para os serviços é `https://gateway.apiserpro.serpro.gov.br/integra-contador/v1/`.
    *   **Estrutura de Requisição (Visualização da Lógica Backend):**
        *   Ao selecionar um serviço (ex: "Gerar DAS" do PGMEI), crie um formulário dinâmico que reflita os parâmetros de "Entrada" necessários para a API.
        *   A IA deve garantir que os campos `contratante`, `autorPedidoDados` e `contribuinte` (com `numero` e `tipo`) estejam presentes e configuráveis, pois são comuns em diversas requisições.
        *   Os campos específicos do serviço (ex: `idSistema`, `idServico`, `versaoSistema`, `dados` para `PGDASD` ou `PGMEI`) devem ser claramente identificados.
        *   **HTTP Headers (Visualização da Lógica Backend):**
            *   A UI deve ilustrar ou explicar que a requisição para o gateway incluirá os seguintes cabeçalhos:
                *   `Authorization: Bearer <access_token>`: Utiliza o `access_token` obtido na etapa de autenticação.
                *   `Content-Type: application/json`: Padrão para o corpo da requisição.
                *   `jwt_token: <jwt_token>`: O `jwt_token` obtido na autenticação também deve ser enviado.
                *   `Accept: application/json` (ou `text/plain` se aplicável, como no exemplo n8n para PDF).
        *   Adicione um botão "Executar Serviço".
    *   **Tela de Saída / Resultados:**
        *   Após a execução do serviço, exiba os dados de "Saída" da API de forma clara e legível.
        *   Para serviços que retornam documentos (ex: DAS em PDF), forneça opções para visualizar, baixar ou imprimir.
        *   Exiba `Códigos de retorno` e `Mensagens do Gerenciador` de forma amigável ao usuário para cada resultado.
        *   Crie um sistema de notificação para erros comuns ou mensagens do sistema.

**6. Seção de Ajuda e Documentação:**
    *   Inclua um link ou seção "Ajuda" ou "Dúvidas/FAQ".
    *   Pode ser útil ter atalhos para seções da documentação oficial do Integra Contador como "Catálogo de Serviços", "Serviços x Procurações", "Códigos de retorno", "Mensagens do Gerenciador" e "Glossário".

---

**Considerações Finais e Requisitos para Geração de Código Modular:**

*   **Estrutura de Código Modular:** A IA deve projetar a UI e a arquitetura subjacente de forma que o código gerado seja modular e reutilizável.
    *   Sugira a criação de **funções ou classes dedicadas** para cada etapa principal:
        *   Uma para gerenciamento de `Consumer Key`/`Secret`.
        *   Uma para upload e conversão de certificados (`.pfx` para `.pem`/.`key`).
        *   Uma para a requisição de autenticação (obtendo `access_token` e `jwt_token`).
        *   Classes/funções separadas para a chamada de cada serviço da API (ex: `chamar_api_gerar_das()`, `chamar_api_consultar_declaracoes()`).
    *   As credenciais e tokens (Consumer Key, Consumer Secret, access_token, jwt_token, caminho do certificado, senha) devem ser armazenados de forma **centralizada e segura** e acessíveis pelos módulos de serviço, evitando repetição de código.
    *   A IA pode fornecer **esqueletos de código** (ex: em Python ou Dotnet, conforme os padrões mencionados) para os módulos de autenticação e exemplos de chamadas de serviço, demonstrando a aplicação dos conceitos de cabeçalhos e corpo da requisição. Por exemplo, como o exemplo em Python e o fluxo n8n demonstram.
*   **Tratamento de Exceções e Erros:** A UI deve prever feedback claro para erros de API (ex: token expirado - 401, procuração não permitida, "Unsupported Media Type" - 415). O código gerado deve incluir tratamento básico de erros HTTP.
*   **Boas Práticas de Segurança:** A IA deve salientar a importância de proteger as credenciais (`Consumer Key` e `Consumer Secret`) e a senha do certificado. A interface não deve expor essas informações de forma insegura.

Este prompt detalhado fornece à IA todas as informações necessárias para criar uma interface de aplicativo robusta e modular, preparada para a integração com o Integra Contador, focando nos aspectos críticos de certificado e autenticação.